import numpy as np
from math import *
import matplotlib.pyplot as plt



def bode(a,b,N,f):
    if (N-1)%4 != 0:
        print("N is not a multiple of the form 4p+1")
        return None
    s=0
    h=(b-a)/N
    for i in range(0,N,4):
        integ=(7*f(a+i*h)+32*f(a+(i+1)*h)+12*f(a+(i+2)*h)+32*f(a+(i+3)*h)+7*f(a+(i+4)*h))
        integ*=(2*h)/45
        s+=integ
    return s

a=4
phi_GT  = lambda r: -1/sqrt(2*a)*(np.exp(-a*r))
phi_LT  = lambda r: 1/sqrt(2*a)*(np.exp(a*r)-np.exp(-a*r))
S       = lambda r: -1/2*r*np.exp(-r)
multipLT = lambda x:phi_LT(x)*S(x)
multipGT = lambda x:phi_GT(x)*S(x)

phi_true = lambda r : (1/(1-a**2)**2)*(np.exp(-a*r)-np.exp(-r)*(1+0.5*(1-a**2)*r))

r0=0
rmax=30
n=500
scale=10
r=np.linspace(r0,rmax,n)
phi=np.zeros((n,))

phi[0],phi[-1]=0,0

for i in range(1,n-1):
    rm=r[i]
    r_LT=np.linspace(r0,rm,scale*4*i+1)
    r_GT=np.linspace(rm,rmax,scale*4*(n-i)+1)
    phi[i] = phi_GT(rm)*bode(r0,rm,len(r_LT),multipLT) + phi_LT(rm)*bode(rm,rmax,len(r_GT),multipGT)
  
plt.figure(1)
plt.title("Numerical vs analytical")
plt.xlabel("r")
plt.ylabel("Amplitude")
plt.plot(r,phi,label="solution")
plt.plot(r,phi_true(r),label="analytical")
plt.legend()
plt.show()

plt.figure(2)
plt.title("Error")
plt.xlabel("r")
plt.ylabel("Error")
plt.plot(r,abs(phi-phi_true(r)),label="solution")
plt.legend()
plt.show()
